
Estructura del proyecto usando MVC

app/
│
├── public/                   # Punto de entrada (index.php)
│   ├── css/
│   ├── js/
│   └── index.php             # Slim arranca aquí
│
├── app/
│   ├── Controllers/          # Controladores
│   ├── Models/               # Modelos
│   ├── Views/                # Vistas (Twig)
│   └── Routes/               # Rutas API
│       └── api.php
│
├── vendor/                  # Composer (Slim + Twig + etc.)
├── composer.json
└── .htaccess



***********************
1. INSTALACIÓN

1.1 Composer + Slim + Twig
composer require slim/slim:"^4.0"
composer require slim/psr7
composer require slim/twig-view

1.2 .htaccess para redirección (en /public)
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ index.php [QSA,L]

***********************
⚙️ 2. ARCHIVO DE ENTRADA: /public/index.php

<?php
use Slim\Factory\AppFactory;
use Slim\Views\Twig;
use Slim\Views\TwigMiddleware;

require __DIR__ . '/../vendor/autoload.php';

$app = AppFactory::create();

// Twig
$twig = Twig::create(__DIR__ . '/../app/Views', ['cache' => false]);
$app->add(TwigMiddleware::create($app, $twig));

// CORS (opcional)
$app->add(function ($request, $handler) {
    $response = $handler->handle($request);
    return $response
        ->withHeader('Access-Control-Allow-Origin', '*')
        ->withHeader('Access-Control-Allow-Headers', 'X-Requested-With, Content-Type, Accept, Origin, Authorization')
        ->withHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
});

// Rutas
(require __DIR__ . '/../app/Routes/api.php')($app);

$app->run();

***********************
🌐 3. RUTAS API /app/Routes/api.php
use Slim\App;
use App\Controllers\UserController;

return function (App $app) {
    $app->get('/', [UserController::class, 'index']);
    $app->get('/api/users', [UserController::class, 'getUsers']);
};

***********************
🧠 4. CONTROLADOR /app/Controllers/UserController.php

namespace App\Controllers;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Slim\Views\Twig;

class UserController {
    public function index(Request $request, Response $response) {
        $view = Twig::fromRequest($request);
        return $view->render($response, 'home.twig');
    }

    public function getUsers(Request $request, Response $response) {
        $data = [
            ['id' => 1, 'name' => 'Ana'],
            ['id' => 2, 'name' => 'Luis']
        ];
        $response->getBody()->write(json_encode($data));
        return $response->withHeader('Content-Type', 'application/json');
    }
}

***********************
🖼️ 5. VISTA Twig /app/Views/home.twig
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>App Slim</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container mt-4">
    <h1>Usuarios</h1>
    <button id="loadUsers" class="btn btn-primary">Cargar usuarios</button>
    <ul id="userList" class="mt-3"></ul>Estructura del proyecto usando MVC
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
    $('#loadUsers').click(function () {
        $.get('/api/users', function (data) {
            $('#userList').empty();
            data.forEach(user => {
                $('#userList').append(`<li>${user.name}</li>`);
            });
        });
    });
</script>
</body>
</html>

***********************
🧪 6. PRUEBA
php -S localhost:8000 -t public

Visita: http://localhost:8000/

Haz clic en "Cargar usuarios", y deberías ver la lista cargada dinámicamente desde /api/users.







***********************
🖥️ Frontend

El frontend es todo lo que el usuario ve e interactúa en su navegador. En este caso incluye:

Twig (home.twig): Se usa para generar la página HTML inicial.

HTML/CSS/JS: Estructura de la página, estilos, y comportamiento.

Bootstrap: Estilos y componentes visuales listos para usar.

jQuery: Hace peticiones AJAX al backend para obtener datos sin recargar la página.

Ejemplo en tu proyecto:
$.get('/api/users', function (data) {
    $('#userList').empty();
    data.forEach(user => {
        $('#userList').append(`<li>${user.name}</li>`);
    });
});



***********************
🖥️🛠️ Backend

l backend es el código que se ejecuta en el servidor. Aquí se gestiona la lógica, las rutas, los controladores y el acceso a datos.

Slim Framework (PHP): Maneja las rutas y respuestas.

Controladores: Lógica de negocio, respuesta a peticiones (por ejemplo, UserController).

Twig (plantillas): Aunque genera HTML, se ejecuta del lado del servidor.

Modelos (opcionalmente): Acceso a la base de datos (si agregas).

Ejemplo en tu proyecto:
public function getUsers(Request $request, Response $response) {
    $data = [
        ['id' => 1, 'name' => 'Ana'],
        ['id' => 2, 'name' => 'Luis']
    ];
    $response->getBody()->write(json_encode($data));
    return $response->withHeader('Content-Type', 'application/json');
}


***********************
Comunicación entre Frontend y Backend

El flujo sería así:
1. El usuario entra a http://localhost:8000/.
2. El servidor (Slim + Twig) renderiza la vista inicial (home.twig).
3. El usuario hace clic en "Cargar usuarios".
4. jQuery hace una petición AJAX a /api/users.
5. Slim (backend) responde con un JSON de usuarios.
6. jQuery muestra los usuarios en la página.


***********************
Conclusión

Sí, estás usando:

Frontend → Todo lo visual + interacción (HTML, JS, jQuery, Bootstrap, Twig).

Backend → Todo lo que responde a las peticiones, genera la vista inicial y provee los datos (PHP, Slim, controladores).

¿Quieres que te muestre cómo agregar una base de datos real (MySQL o SQLite) para que los datos vengan del backend dinámicamente?


